set nocompatible    " be iMproved, required
filetype off        " required
set number          " Sets line numbers on the side


"######## Begin Vundle STUFF ################################
" Vundle is used for installing vim plugins. (e.g. syntax highlighting / smart
" indentation / smart auto-complete support for various programming
" languages.)
" For installation deatils, see https://github.com/gmarik/Vundle.vim

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()  " signal start of vundle script
  " Add plugins here, then install by opening vim and running
  " :PluginInstall
  Plugin 'gmarik/Vundle.vim'                " Vim
  Plugin 'tmux-plugins/vim-tmux'            " tmux
  Plugin 'godlygeek/tabular'                " Auto Indent
  Plugin 'plasticboy/vim-markdown'          " Markdown
  Plugin 'octol/vim-cpp-enhanced-highlight' " C++
  Plugin 'derekwyatt/vim-scala'             " Scala
  Plugin 'JuliaEditorSupport/julia-vim'     " julia
  Plugin 'fatih/vim-go'                     " Go-lang
  Plugin 'luiarthur/kotlin-vim'             " Kotlin
  Plugin 'tfnico/vim-gradle'                " Gradle
  Plugin 'vim-syntastic/syntastic'          " For vim linters
  "Plugin 'luiarthur/stan.vim'               " STAN modeling
  "Plugin 'rust-lang/rust.vim'               " Rust
  "Plugin 'luiarthur/bayes.vim'              " bayes. My thing.
  "Plugin 'matze/vim-lilypond'               " lilypond
  "Plugin 'davidhalter/jedi-vim'            " Python autocomplete
  "Plugin 'vim-pandoc/vim-pandoc-syntax'    " pandoc
  "Plugin 'vim-pandoc/vim-pandoc'           " pandoc
  "set nofoldenable    " disable folding
call vundle#end()  " signal the end of vundle script
filetype plugin indent on  " turn on smart indentation for installed plugins
"########End of Vundle STUFF###############################


" Basic stuff
syntax enable               " Syntax highlighting
set hlsearch                " Highlight search items
set incsearch               " Highlight search items as you type
set showmatch               " Show matches for parenthesis, etc.
set expandtab               " Use softtabs
set tabstop=2 shiftwidth=2  " Set tab width
set background=light        " Assume a light background (dark is the other option)
set autoindent
set clipboard=unnamed


" set colorscheme to redmagick
try
  colorscheme redmagick
catch
endtry


" Return to last position
set viminfo='100,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif 


" Indenting / unindenting in visual mode
vmap < <gv  
vmap > >gv
vmap <s-tab> <gv
vmap <tab> >gv


" Intelligent tab completion
function! InsertTabWrapper(direction)
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  elseif "backward" == a:direction
    return "\<c-p>"
  else
    return "\<c-n>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>


" Keybinding for word wrap for consequtive lines
nnoremap <C-n> gqap


" Switch to hex-editor. I'll probably never use this. But just in case...
noremap <F8> :%!xxd<CR>
" Switch back
noremap <F7> :%!xxd -r<CR>


" disable F1 for help
nmap <F1> <nop>


" Toggle folding with F9. 
set foldmethod=manual " enables folding by visual selection select
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf


" Copy and paste between vim sessions
" Copy the current visual selection to ~/.vbuf
vmap <C-S-u> :w! xsel<CR> " copy the current visual selection to X11 clipboard using "xsel"
vmap <C-S-y> "+y<CR>      " copy the current visual selection to ~/.vbuf
nmap <C-S-p> "+p<CR>      " paste the contents of the buffer file
" For servers, replace the above few lines with these below:
"vmap <C-S-y> :w! ~/.vbuf<CR>     " copy the current visual selection to ~/.vbuf
"nmap <C-S-p> :r ~/.vbuf<CR>      " paste the contents of the buffer file

" Turn off syntastic for these languages: Scala
" Turn on syntax highlighting for scala with Ctrl-w E
let g:syntastic_mode_map = {'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['scala']}
nnoremap <C-w>E :SyntasticCheck<CR> 
" ":SyntasticToggleMode<CR>
let g:syntastic_aggregate_errors = 1
